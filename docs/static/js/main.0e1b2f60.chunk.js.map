{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","styled","input","EmailContainer","div","EmailLine","props","boop","ButtonContainer","Button","button","SERVER_ENDPOINT","App","searchRef","useRef","useState","localStorage","getItem","token","setToken","emails","setEmails","selectedEmail","setSelectedEmail","searchParam","setSearchParam","auth","options","method","headers","body","JSON","stringify","username","password","fetch","then","response","json","data","setItem","getAll","Authorization","concat","console","log","choosers","raptors","rsvps","useEffect","className","onClick","placeholder","ref","onChange","e","target","value","map","u","email","includes","key","innerHTML","raptor","split","id","raptorname","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+zCAEO,IAAMA,EAAcC,IAAOC,MAAV,KAUXC,EAAiBF,IAAOG,IAAV,KASdC,EAAYJ,IAAOG,IAAV,IAKK,SAAAE,GAAK,OAAIA,EAAMC,OAS7BC,EAAkBP,IAAOG,IAAV,KAGfK,EAASR,IAAOS,OAAV,KCnCbC,EAAqF,2BA2F5EC,MAvFf,WACE,IAAMC,EAAYC,iBAAO,IADZ,EAEeC,mBAAS,IAFxB,gCAGaA,mBAASC,aAAaC,QAAQ,YAH3C,mBAGNC,EAHM,KAGCC,EAHD,OAIeJ,mBAAS,IAJxB,mBAINK,EAJM,KAIEC,EAJF,OAK6BN,mBAAS,IALtC,gCAM6BA,mBAAS,KANtC,mBAMNO,EANM,KAMSC,EANT,OAOyBR,mBAAS,IAPlC,mBAONS,EAPM,KAOOC,EAPP,KAUPC,EAAO,WACX,IAAMC,EAAU,CAAEC,OAAQ,OAAQC,QAAS,CAAE,eAAgB,oBAAsBC,KAAMC,KAAKC,UAAU,CAAEC,SAAU,QAASC,SAAU,WACvIC,MAAMxB,EAAkB,cAAegB,GAASS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GACrFpB,EAASoB,EAAKrB,OACdF,aAAawB,QAAQ,SAAUD,EAAKrB,UAGlCuB,EAAS,WACb,IAAMd,EAAU,CAAEC,OAAQ,MAAOC,QAAS,CAAEa,cAAe,UAAUC,OAAOzB,GAAQ,eAAgB,qBACpGiB,MAAMxB,EAAkB,QAASgB,GAASS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GAC/EK,QAAQC,IAAIN,GAD2E,IAEpEO,EAAeP,EAA1BQ,QAAWD,SAEb1B,EADuBmB,EAArBS,MAASA,MACIL,OAAOG,GAC5BzB,EAAUD,MAuCd,OALA6B,oBAAU,WACRR,IACAf,KACC,IACHkB,QAAQC,IAAIzB,GAEV,yBAAK8B,UAAU,QACXhC,GAAS,kBAACT,EAAD,CAAQ0C,QAASzB,GAAjB,QAEX,kBAAC1B,EAAD,CAAaoD,YAAY,SAASC,IAAKxC,EAAWyC,SA3BlC,SAACC,GAAD,OAAO9B,EAAe8B,EAAEC,OAAOC,UA4B/C,kBAACtD,EAAD,KACGiB,EAAOsC,IAAI,SAAAC,GACV,GAAIA,EAAEC,MAAMC,SAASrC,GAAc,OAAO,kBAACnB,EAAD,CAAWyD,IAAKH,EAAEC,MAAOT,QAAS,SAACI,GAAD,OAAOhC,EAAiB,CAAEqC,MAAOL,EAAEC,OAAOO,UAAWC,OAAQT,EAAEC,OAAON,UAAUe,MAAM,UAAU,MAAOC,GAAIP,EAAEC,QAAUtC,EAAcsC,MAAQ,WAAa,GAAIV,UAAWS,EAAEQ,WAAa,cAAgB,OAAQ5D,KAAMoD,EAAEpD,KAAO,eAAiB,IAAMoD,EAAEC,UAGxU,kBAACpD,EAAD,KACE,kBAACC,EAAD,CAAQ0C,QA5CI,WAChB,IAAMxB,EAAU,CAAEC,OAAQ,OAAQC,QAAS,CAAEa,cAAe,UAAUC,OAAOzB,GAAQ,eAAgB,oBAAsBY,KAAMC,KAAKC,UAAU,CAAE4B,MAAOtC,EAAcsC,MAAOI,OAAQ1C,EAAc0C,UACpM7B,MAAMxB,EAAkB,kBAAmBgB,GACxCS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJE,QAuCA,cCrEY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,iB","file":"static/js/main.0e1b2f60.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const SearchInput = styled.input`\n    width: 90%;\n    display: block;\n    margin: 40px auto 16px;\n    border: 2px black solid;\n    height: 47px;\n    font-size: 30px;\n    text-align: center;\n`\n\nexport const EmailContainer = styled.div`\n    display:flex;\n    background:black;\n    color:white;\n    justify-content: center;\n    flex-direction: column;\n    width: 90%;\n    margin: auto;\n`\nexport const EmailLine = styled.div`\n    &.rsvp {\n        text-align: center;\n        font-size: 30px;\n        padding:22px;\n        text-decoration: ${props => props.boop}\n    }\n    &.raptor {\n        color:deeppink;\n    }\n    &#selected{\n        background:limegreen;\n    }\n`\nexport const ButtonContainer = styled.div`\nmargin-top:10px;\n`\nexport const Button = styled.button`\n    background: black;\n    color: white;\n    width: 330px;\n    height: 150px;\n    text-align: center;\n    display: block;\n    margin: auto;\n    font-size: 49px;\n`","import React, { useEffect, useRef, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Button, ButtonContainer, EmailContainer, EmailLine, SearchInput } from './styles'\nconst SERVER_ENDPOINT = process.env.NODE_ENV === 'development' ? \"http://localhost:4000\" : \"https://eng.med--lab.org\"\n\n// var n = { method: \"POST\", headers: { Authorization: \"Bearer \".concat(s), \"Content-Type\": \"application/json\" }, body: JSON.stringify({ qr: t }) };\n\nfunction App() {\n  const searchRef = useRef('')\n  const [result, setResult] = useState(\"\");\n  const [token, setToken] = useState(localStorage.getItem('ttoken'))\n  const [emails, setEmails] = useState([])\n  const [matchedEmails, setMatchedEmails] = useState([])\n  const [selectedEmail, setSelectedEmail] = useState(\"\")\n  const [searchParam, setSearchParam] = useState(\"\")\n\n\n  const auth = () => {\n    const options = { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify({ username: \"admin\", password: \"admin\" }) }\n    fetch(SERVER_ENDPOINT + \"/auth/login\", options).then(response => response.json()).then(data => {\n      setToken(data.token)\n      localStorage.setItem('ttoken', data.token)\n    })\n  }\n  const getAll = () => {\n    const options = { method: \"GET\", headers: { Authorization: \"Bearer \".concat(token), \"Content-Type\": \"application/json\" } };\n    fetch(SERVER_ENDPOINT + \"/user\", options).then(response => response.json()).then(data => {\n      console.log(data)\n      const { raptors: { choosers } } = data\n      const { rsvps: { rsvps } } = data;\n      const emails = rsvps.concat(choosers)\n      setEmails(emails)\n    })\n  }\n  const selectEmail = () => {\n\n  }\n  const boopEmail = () => {\n    const options = { method: \"POST\", headers: { Authorization: \"Bearer \".concat(token), \"Content-Type\": \"application/json\" }, body: JSON.stringify({ email: selectedEmail.email, raptor: selectedEmail.raptor }) };\n    fetch(SERVER_ENDPOINT + '/rsvp/boopemail', options)\n      .then(response => response.json())\n      .then(data => {\n        getAll()\n      })\n  }\n\n  // const handleInput = (e) => updateSearch(e.target.value)\n  const handleInput = (e) => setSearchParam(e.target.value)\n\n  const updateSearch = (search) => {\n    if (!search) return setMatchedEmails(emails)\n    const matchedEmails = emails.filter(u => u.email.includes(search))\n    setMatchedEmails(matchedEmails)\n  }\n\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n    }\n  };\n\n  const handleError = err => {\n    console.log(err);\n  };\n\n  useEffect(() => {\n    getAll()\n    auth()\n  }, [])\n  console.log(emails)\n  return (\n    <div className=\"App\">\n      {!token && <Button onClick={auth}>AUTH</Button>}\n      {/* <Button onClick={getAll}>GETALL</Button> */}\n      <SearchInput placeholder=\"SEARCH\" ref={searchRef} onChange={handleInput} />\n      <EmailContainer>\n        {emails.map(u => {\n          if (u.email.includes(searchParam)) return <EmailLine key={u.email} onClick={(e) => setSelectedEmail({ email: e.target.innerHTML, raptor: e.target.className.split('raptor')[0] })} id={u.email === selectedEmail.email ? 'selected' : ''} className={u.raptorname ? 'raptor rsvp' : 'rsvp'} boop={u.boop ? 'line-through' : ''} >{u.email}</EmailLine>\n        })}\n      </EmailContainer>\n      <ButtonContainer>\n        <Button onClick={boopEmail}>CHECKIN</Button>\n      </ButtonContainer>\n      {/* <QrReader\n        delay={300}\n        onError={handleError}\n        onScan={handleScan}\n        style={{ width: \"100%\" }}\n      />\n      <p>PAPA-{result}-PAPA</p> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}