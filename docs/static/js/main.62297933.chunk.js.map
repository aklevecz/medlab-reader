{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["Nav","styled","div","SearchInput","input","EmailContainer","EmailLine","props","boop","ButtonContainer","Button","button","SERVER_ENDPOINT","App","searchRef","useRef","useState","view","setView","result","setResult","token","setToken","emails","setEmails","selectedEmail","setSelectedEmail","searchParam","setSearchParam","qrMessage","setQrMessage","messageStatus","setMessageStatus","getAll","options","method","headers","Authorization","concat","fetch","then","response","json","data","console","log","choosers","raptors","rsvps","sort","a","b","email","useEffect","body","JSON","stringify","username","password","localStorage","setItem","auth","className","onClick","delay","onError","err","onScan","style","width","textAlign","margin","color","onChange","e","target","value","qr","qrId","datetime","Date","boopTime","toLocaleTimeString","toDateString","placeholder","ref","map","u","i","includes","key","innerHTML","raptor","split","id","raptorname","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62297933.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Nav = styled.div`\ndisplay:flex;\njustify-content:space-around;\ndiv {\n    border: 7px white solid;\n    width: 100%;\n    text-align: center;\n    background: black;\n    height: 50px;\n    color: white;\n    line-height: 50px;\n    font-size: 24px;\n    font-weight: bold;\n}\n`\n\nexport const SearchInput = styled.input`\n    width: 90%;\n    display: block;\n    margin: 40px auto 16px;\n    border: 2px black solid;\n    height: 47px;\n    font-size: 30px;\n    text-align: center;\n`\n\nexport const EmailContainer = styled.div`\n    display:flex;\n    background:black;\n    color:white;\n    justify-content: center;\n    flex-direction: column;\n    width: 90%;\n    margin: auto;\n`\nexport const EmailLine = styled.div`\n    font-size:20px;\n    white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n    &.rsvp {\n        text-align: center;\n        padding:22px;\n        text-decoration: ${props => props.boop}\n    }\n    &.raptor {\n        color:deeppink;\n    }\n    &#selected{\n        background:limegreen;\n    }\n`\nexport const ButtonContainer = styled.div`\nposition: fixed;\n    left: 0;\n    bottom: 0;\n    width:100%;\n`\nexport const Button = styled.button`\n    background: black;\n    color: white;\n    width: 100%;\n    height: 150px;\n    text-align: center;\n    display: block;\n    margin: auto;\n    font-size: 49px;\n    border: 13px white solid;\n`","import React, { useEffect, useRef, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Button, ButtonContainer, EmailContainer, EmailLine, Nav, SearchInput } from './styles'\nconst SERVER_ENDPOINT = process.env.NODE_ENV === 'development' ? \"http://localhost:4000\" : \"https://eng.med--lab.org\"\n\n// var n = { method: \"POST\", headers: { Authorization: \"Bearer \".concat(s), \"Content-Type\": \"application/json\" }, body: JSON.stringify({ qr: t }) };\n\nfunction App() {\n  const searchRef = useRef('')\n  const [view, setView] = useState('search')\n  const [result, setResult] = useState(\"\");\n  const [token, setToken] = useState(\"\")\n  const [emails, setEmails] = useState([])\n  const [matchedEmails, setMatchedEmails] = useState([])\n  const [selectedEmail, setSelectedEmail] = useState(\"\")\n  const [searchParam, setSearchParam] = useState(\"\")\n  const [qrMessage, setQrMessage] = useState(\"\")\n  const [messageStatus, setMessageStatus] = useState(\"\")\n\n\n  const auth = () => {\n    const options = { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify({ username: \"reader\", password: \"reader\" }) }\n    fetch(SERVER_ENDPOINT + \"/auth/login\", options).then(response => response.json()).then(data => {\n      console.log(data)\n      setToken(data.token)\n      localStorage.setItem('ttoken', data.token)\n    })\n  }\n  const getAll = () => {\n    if (!token) return\n    const options = { method: \"GET\", headers: { Authorization: \"Bearer \".concat(token), \"Content-Type\": \"application/json\" } };\n    fetch(SERVER_ENDPOINT + \"/user\", options).then(response => response.json()).then(data => {\n      console.log(data)\n      const { raptors: { choosers } } = data\n      const { rsvps: { rsvps } } = data;\n      const emails = rsvps.concat(choosers)\n      setEmails(emails.sort((a, b) => (a.email > b.email) ? 1 : -1))\n    })\n  }\n  const selectEmail = () => {\n\n  }\n  const boopEmail = () => {\n    const options = { method: \"POST\", headers: { Authorization: \"Bearer \".concat(token), \"Content-Type\": \"application/json\" }, body: JSON.stringify({ email: selectedEmail.email, raptor: selectedEmail.raptor }) };\n    fetch(SERVER_ENDPOINT + '/rsvp/boopemail', options)\n      .then(response => response.json())\n      .then(data => {\n        getAll()\n      })\n  }\n  //t14o21a35d?040ca650-fb2e-34db-999d-30613e969f36\n  const sendQR = () => {\n    console.log('sendQT')\n    const options = { method: \"POST\", headers: { Authorization: \"Bearer \".concat(token), \"Content-Type\": \"application/json\" }, body: JSON.stringify({ qr: result }) };\n    fetch(SERVER_ENDPOINT + '/toad/boop', options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.qrId) {\n          setQrMessage('raptor has been successfully checked in :)')\n          setMessageStatus('green')\n        }\n        if (data.data === 'booped') {\n          const datetime = `${new Date(data.boopTime).toLocaleTimeString()} - ${new Date(data.boopTime).toDateString()}`\n          setQrMessage(`this QR was checked in @ ${datetime}`)\n          setMessageStatus('red')\n        }\n        setResult('')\n\n      })\n  }\n\n  // const handleInput = (e) => updateSearch(e.target.value)\n  const handleInput = (e) => setSearchParam(e.target.value)\n\n  const updateSearch = (search) => {\n    if (!search) return setMatchedEmails(emails)\n    const matchedEmails = emails.filter(u => u.email.includes(search))\n    setMatchedEmails(matchedEmails)\n  }\n\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n    }\n  };\n\n  const handleError = err => {\n    console.log(err);\n  };\n\n  useEffect(() => {\n    auth()\n  }, [])\n\n  useEffect(() => {\n    getAll()\n\n  }, [token])\n  console.log(emails)\n  return (\n    <div className=\"App\">\n      <Nav>\n        <div onClick={() => setView('search')}>SEARCH</div>\n        <div onClick={() => setView('qr')}>QR READER</div>\n      </Nav>\n      {view === 'qr' && <div><QrReader\n        delay={300}\n        onError={handleError}\n        onScan={handleScan}\n        style={{ width: \"100%\" }}\n      />\n        <div style={{ textAlign: 'center', width: '80%', margin: 'auto' }}>\n          <div style={{ color: messageStatus }}>{qrMessage}</div>\n          <p>{result}</p>\n          <input onChange={(e) => setResult(e.target.value)} />\n          {result && <Button onClick={sendQR}>SENDIT</Button>}\n        </div>\n      </div>}\n      {/* <Button onClick={auth}>AUTH</Button> */}\n      {/* <Button onClick={getAll}>GETALL</Button> */}\n      {view === 'search' && <div><SearchInput placeholder=\"SEARCH\" ref={searchRef} onChange={handleInput} />\n        <EmailContainer>\n          {emails.map((u, i) => {\n            if (u.email.includes(searchParam)) return <EmailLine key={u.email + i} onClick={(e) => setSelectedEmail({ email: e.target.innerHTML, raptor: e.target.className.split('raptor')[0] })} id={u.email === selectedEmail.email ? 'selected' : ''} className={u.raptorname ? 'raptor rsvp' : 'rsvp'} boop={u.boop ? 'line-through' : ''} >{u.email}</EmailLine>\n          })}\n        </EmailContainer>\n        <ButtonContainer>\n          <Button onClick={boopEmail}>CHECKIN</Button>\n        </ButtonContainer></div>}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}