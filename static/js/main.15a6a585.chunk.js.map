{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","SendItButton","QrWrapper","div","QrTitle","QrText","Error","SERVER","localStorage","setItem","App","useState","qr","setResult","getItem","userToken","setUserToken","color","setColor","error","setError","login","requestOptions","method","headers","body","JSON","stringify","username","password","fetch","then","response","json","data","token","console","log","className","onClick","delay","onError","err","onScan","style","width","Authorization","message","date","Date","boopTime","dateString","toLocaleTimeString","toDateString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6tCAEO,IAAMA,EAASC,IAAOC,OAAV,KASNC,EAAeF,YAAOD,EAAPC,CAAH,KAIZG,EAAYH,IAAOI,IAAV,KAMTC,EAAUL,IAAOI,IAAV,KAQPE,EAASN,IAAOI,IAAV,KAWNG,EAAQP,IAAOI,IAAV,KC7BZI,EAAS,wBAEfC,aAAaC,QAAQ,SAAU,SAwFhBC,MAvFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACFC,EADE,OAEqBF,mBAASH,aAAaM,QAAQ,WAFnD,mBAENC,EAFM,KAEKC,EAFL,OAGaL,mBAAS,SAHtB,mBAGNM,EAHM,KAGCC,EAHD,OAIaP,mBAAS,IAJtB,mBAINQ,EAJM,KAICC,EAJD,KA8CPC,EAAQ,WACZD,EAAS,IACT,IAAME,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,SAAU,QAASC,SAAU,WAGtDC,MAAMvB,EAAS,cAAee,GAC3BS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ1B,aAAaC,QAAQ,SAAUyB,EAAKC,OACpCC,QAAQC,IAAIH,GACZlB,EAAakB,EAAKC,UAIxB,OACE,yBAAKG,UAAU,QACXvB,GAAa,kBAACjB,EAAD,CAAQyC,QAASlB,GAAjB,gBACdN,GACC,6BACE,kBAAC,IAAD,CACEyB,MAAO,IACPC,QA1DU,SAAAC,GAClBN,QAAQC,IAAIK,IA0DJC,OAjES,SAAAT,GACbA,GACFrB,EAAUqB,IAgEJU,MAAO,CAAEC,MAAO,UAElB,kBAAC3C,EAAD,KACE,kBAACE,EAAD,KAAUQ,EAAK,WAAa,sBAC5B,kBAACP,EAAD,CAAQuC,MAAO,CAAE3B,UAAUL,IAG5BA,GAAM,kBAACX,EAAD,CAAcsC,QA/Dd,WACbnB,EAAS,IACT,IAAME,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACPsB,cAAc,UAAD,OAAY/B,GACzB,eAAgB,oBAElBU,KAAMC,KAAKC,UAAU,CAAEf,QAEzBkB,MAAMvB,EAAS,aAAce,GAC1BS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,GAAqB,6BAAjBA,EAAKa,QAGP,OAFA1B,SACAD,EAAS,oBAGX,GAAkB,WAAdc,EAAKA,KAAmB,CAC1B,IAAMc,EAAO,IAAIC,KAAKf,EAAKgB,UACrBC,EACJH,EAAKI,qBAAuB,IAAMJ,EAAKK,eACzCjC,EAAS,qBAAD,OAAsB+B,IAC9BjC,EAAS,YAETA,EAAS,aAsCF,WACP,kBAACZ,EAAD,KAAQa,MClFEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.15a6a585.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  background: white;\r\n  color: black;\r\n  margin: 0 auto;\r\n  display: block;\r\n  font-size: 30px;\r\n  margin-top: 241px;\r\n`;\r\n\r\nexport const SendItButton = styled(Button)`\r\n  margin-top: 0px;\r\n`;\r\n\r\nexport const QrWrapper = styled.div`\r\n  border: 3px black solid;\r\n  margin: 41px;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const QrTitle = styled.div`\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  text-decoration: underline;\r\n  display: block;\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const QrText = styled.div`\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  display: block;\r\n  text-overflow: ellipsis;\r\n  width: 46%;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const Error = styled.div`\r\n  display: block;\r\n  margin: auto;\r\n  text-align: center;\r\n  color: red;\r\n`;\r\n","import React, { useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport {\n  Button,\n  Error,\n  QrWrapper,\n  QrTitle,\n  QrText,\n  SendItButton\n} from \"./styles\";\n\nconst SERVER = \"http://localhost:4000\";\nconst EXAMPLE_TOAD = \"t6o9a15d?1c33ac73-30fd-358a-b065-6f92cb0d10d6\";\nlocalStorage.setItem(\"ttoken\", \"meepo\");\nfunction App() {\n  const [qr, setResult] = useState(\"\");\n  const [userToken, setUserToken] = useState(localStorage.getItem(\"ttoken\"));\n  const [color, setColor] = useState(\"black\");\n  const [error, setError] = useState(\"\");\n\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n    }\n  };\n\n  const handleError = err => {\n    console.log(err);\n  };\n\n  const sendIt = () => {\n    setError(\"\");\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${userToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ qr })\n    };\n    fetch(SERVER + \"/toad/boop\", requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        if (data.message === \"your session has expired\") {\n          login();\n          setError(\"please try again\");\n          return;\n        }\n        if (data.data === \"booped\") {\n          const date = new Date(data.boopTime);\n          const dateString =\n            date.toLocaleTimeString() + \"-\" + date.toDateString();\n          setError(`this was booped @ ${dateString}`);\n          setColor(\"red\");\n        } else {\n          setColor(\"green\");\n        }\n      });\n  };\n\n  const login = () => {\n    setError(\"\");\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username: \"admin\", password: \"admin\" })\n    };\n\n    fetch(SERVER + \"/auth/login\", requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        localStorage.setItem(\"ttoken\", data.token);\n        console.log(data);\n        setUserToken(data.token);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      {!userToken && <Button onClick={login}>AUTHENTICATE</Button>}\n      {userToken && (\n        <div>\n          <QrReader\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: \"100%\" }}\n          />\n          <QrWrapper>\n            <QrTitle>{qr ? \"QR FOUND\" : \"lookin for a QR...\"}</QrTitle>\n            <QrText style={{ color }}>{qr}</QrText>\n          </QrWrapper>\n          {/* <input onChange={e => setResult(e.target.value)} /> */}\n          {qr && <SendItButton onClick={sendIt}>SEND IT</SendItButton>}\n          <Error>{error}</Error>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}